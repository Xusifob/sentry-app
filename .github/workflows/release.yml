name: Release CI & Deploy

on:
  push:
    branches:
      - main
      # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - uses: ./.github/actions/cache
        with:
          name: 'node-modules_${{ github.run_id }}'

      - name: Install dependencies
        run: npm ci


  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - uses: ./.github/actions/cache
        with:
          name: 'node-modules_${{ github.run_id }}'
      - run: npm run lint

 # tsc:
 #   runs-on: ubuntu-latest
 #   needs: install
 #   steps:
 #     - uses: actions/checkout@v2
 #     - name: Use Node.js
 #       uses: actions/setup-node@v2
 #       with:
 #         node-version: 14
 #     - uses: ./.github/actions/cache
 #       with:
 #         name: 'node-modules_${{ github.run_id }}'
 #     - run: npm run tsc

  # test:
  #   runs-on: ubuntu-latest
  #   needs: install
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 14
  #     - uses: ./.github/actions/cache
  #       with:
  #         name: 'node-modules_${{ github.run_id }}'
  #     - run: npm run jest


  security:
    runs-on: ubuntu-latest
    environment:
      name: 'production'
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --all-projects --severity-threshold=high


  build:
    runs-on: ubuntu-latest
    needs: install
    environment:
      name: 'production'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - uses: ./.github/actions/cache
        with:
          name: 'node-modules_${{ github.run_id }}'

      - name: Cache build dir
        uses: ./.github/actions/cache
        with:
          path: '**/dist'
          name: 'cache-build-dir_${{ github.run_id }}'
      - run: |
          output="$(awk -F '=' '/VITE_API_URL/{$2="${{ vars.VITE_API_URL }}"}1' OFS='=' .env.production)" && echo "$output" > .env.production
          output="$(awk -F '=' '/VITE_SENTRY_DSN/{$2="${{ vars.VITE_SENTRY_DSN }}"}1' OFS='=' .env.production)" && echo "$output" > .env.production
          output="$(awk -F '=' '/VITE_ONESIGNAL_APP_ID/{$2="${{ vars.VITE_ONESIGNAL_APP_ID }}"}1' OFS='=' .env.production)" && echo "$output" > .env.production
          npm run build


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build, lint, security]
    environment:
      name: 'production'
    steps:
      - uses: actions/checkout@v2
      - name: Cache build dir
        uses: ./.github/actions/cache
        with:
          path: '**/dist'
          name: 'cache-build-dir_${{ github.run_id }}'
      - name: Create SSH key
        shell: bash
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_DEPLOY_KEY }}" > ~/.ssh/private.key
          sudo chmod 600 ~/.ssh/private.key
          ssh-keyscan -H "${{ secrets.SSH_DEPLOY_HOST }}" > ~/.ssh/known_hosts

      - name: 'send build "dist_${{ github.sha }} and deploy"'
        run: |
          export DIST_DIR=dist_${{ github.sha }}
          cp -r dist $DIST_DIR
          zip -r $DIST_DIR.zip $DIST_DIR
          scp -i ~/.ssh/private.key -r ./$DIST_DIR.zip ${{ secrets.SSH_DEPLOY_USER }}@${{ secrets.SSH_DEPLOY_HOST }}:./
          ssh -i ~/.ssh/private.key  ${{ secrets.SSH_DEPLOY_USER }}@${{ secrets.SSH_DEPLOY_HOST }} "unzip -o ./$DIST_DIR.zip && rm -rf ./app/* && cp -R ./$DIST_DIR/* ./app && rm -rf ./$DIST_DIR && rm -rf ./$DIST_DIR.zip"

